import json
import os
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

DATA_FILE = "users.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w") as f:
            json.dump({}, f)
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

async def pstart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {
            "name": update.effective_user.first_name,
            "coins": 10000,
            "last_recharge": "2000-01-01"
        }
        save_data(data)
        await update.message.reply_text("🎉 Te has registrado con 10.000 monedas.")
    else:
        await update.message.reply_text("Ya estás registrado.")

async def precargar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    if user_id in data:
        last = datetime.strptime(data[user_id]["last_recharge"], "%Y-%m-%d")
        if datetime.now() - last >= timedelta(days=1):
            data[user_id]["coins"] += 2000
            data[user_id]["last_recharge"] = datetime.now().strftime("%Y-%m-%d")
            save_data(data)
            await update.message.reply_text("🔁 Recarga exitosa (+2000 monedas).")
        else:
            await update.message.reply_text("⏳ Solo puedes recargar una vez al día.")
    else:
        await update.message.reply_text("Usa /pstart para registrarte.")

async def pbalance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    if user_id in data:
        coins = data[user_id]["coins"]
        await update.message.reply_text(f"💰 Tu saldo: {coins} monedas.")
    else:
        await update.message.reply_text("Usa /pstart para registrarte.")

async def pranking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    ranking = sorted(data.items(), key=lambda x: x[1]["coins"], reverse=True)
    msg = "🏆 Ranking de jugadores:\n"
    for i, (uid, info) in enumerate(ranking[:10], start=1):
        msg += f"{i}. {info['name']} – {info['coins']} monedas\n"
    await update.message.reply_text(msg)

if __name__ == "__main__":
    BOT_TOKEN = "7595193108:AAHqrySXp1aog2uRN4yMIEusnoMxb8Dh00o"
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("pstart", pstart))
    app.add_handler(CommandHandler("precargar", precargar))
    app.add_handler(CommandHandler("pbalance", pbalance))
    app.add_handler(CommandHandler("pranking", pranking))
    print("✅ Bot iniciado correctamente...")
    app.run_polling()
